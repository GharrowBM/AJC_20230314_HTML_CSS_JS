body {
  background-color: rgb(229, 220, 220);
  /* background-image: url(http://cdn.akc.org/content/article-body-image/samoyed_puppy_dog_pictures.jpg); */
}

h3 {
  color: yellow;
}

ol {
  /* Pour changer le style d'une liste ordonnée, on peut le faire via la propriété list-style qui peut idéalement avoir comme valeurs : decimal, lower-alpha, upper-alpha, lower-roman, upper-roman */
  list-style: upper-alpha;
}

li {
  color: orange;
}

/* Pour pouvoir sélectionner plus précisément dans notre CSS, il est possible de faire appel à ces sélecteurs basés sur une hierarchie particulière: 
- 'parent enfant' => on sélectionne l'enfant du moment qu'il a un parent (plus ou moins proche) tel que défini
- 'parent > enfant': on sélectionne l'enfant du moment qu'il est enfant direct du parent spécifié. */

ul > li {
  color: blue;
}

/* Pour cibler une classe en particulier depuis notre CSS, la syntaxe à utiliser est '.nom-de-classe' */
li.color-1 {
  color: yellow;
}

/* Pour cibler un ID en particulier dans notre CSS, la syntaxe à observer est '#nom-id' */
#li-A {
  color: green;
}

/* Les sélecteurs CSS respectent une hierarchie précise en ce qui concerne leur importance: balise < class < id */

.p-class {
  /* Pour les couleurs, il est possible de se servir:
  - Des variables de couleurs standards telles que 'red', 'green', 'orange', etc...
  - Des couleurs de type hexadécimales : #RRGGBB
  - Des couleurs en RGB : rgb(R, G, B)
  - Des couleurs en RGBA : rgba(R, G, B, A) */
  color: rgb(191, 56, 29);

  /* Pour les tailles, il existe plusieurs valeurs possibles:
  - Les valeurs en pixel: XXXpx
  - Les tailles en rem (1rem = 16px): 1rem
  - Un pourcentage de la taille du parent (dont la taille a une valeur fixée en CSS) le plus proche: 15%
  - En fonction de la hauteur de la vue (de base le navigateur) : 15vh
  - En fonction de la largeur de la vue (de base le navigateur): 20vw
   */
  font-size: 2rem;
  font-weight: bold; /* normal | bold | lighter */
  font-style: normal; /* italic | normal */
  text-decoration: none; /* none | underline | line-through | overline */
  text-transform: none; /* none | capitalize | uppercase | lowercase */
  font-family: initial; /* Une succession de polices séparées par des virgules | types de polices: serif, sans-serif, monospace, cursive, fantasy... */
  text-align: start; /* start, left | center | justify | end, right */
}

#boite-rouge-A {
  /* Pour les valeurs de margins / paddings, il est possible de décrire soit:display: 
  - Les 4 axes en même temps avec une valeur
  - L'axe Y puis l'axe X avec deux valeurs
  Haut Droite Bas Gauche avec 4 valeurs */
  margin: 50px 20px 25px 10px;
  padding: 20px 0 0 5px;

  /* Styles de bordures: solid, dotted, dashed */
  border: 5px solid black;
  /* border-radius est utilisé principalement avec comme valeur des pixels, sauf si l'on veut faire un cercle où on utilisera pour le coup 50% */
  border-radius: 50%;
  /* Pour masquer les enfants qui peuvent dépasser des bords du parent, on utilise l'overflow: hidden */
  overflow: hidden;
  height: 200px;
  width: 200px;
  background-color: red;
}

.text-white {
  color: yellow;
}

textarea {
  resize: none;
}

h1 {
  color: blue;
  display: inline;

}

.center-text {
  text-align: center;
}

.boite-a {
  /*
    Pour positionner des éléments en CSS, il est possible de se servir de la propriété 'position' qui de base suit la valeur 'static'. 

    - La position statique est celle qu'aurait lélément s'il suit le flux de la page (l'ordre de l'HTML)
    - La position 'relative' est la position de l'élément relativement à son emplacement de base, qui est conservé dans le flux de la page.
    - La position 'fixed' qui permet de positionner l'élément par rapport à la page du navigateur
    - La position 'absolute' qui va se positionner de façon absolue par rapport à son parent relatif le plus proche (en cas d'absence d'un tel parent, cela sera par rapport à la vue du navigateur, qui elle est positionnée relativement dans notre interface d'ordinateur)
    - La position 'sticky' qui va permettre de faire se coller l'élément à des bords de notre écran si la valeur de son décalage par rapport au haut, bas, gauche ou droite est censée passer en dessosu de la valeur minimale fixée

  */
  position: relative;
  top: 20px;
  left: 10px;
  z-index: -1;
  height: 500px;
  width: 500px;
  background-color: red;
}

.boite-b {
  position: absolute;
  top: 10px;
  left: 200px;
  z-index: -1;
  height: 100px;
  width: 100px;
  background-color: black;
}

.boite-c {
  position: sticky;
  top: 0;
  bottom: 0;
  height: 50px;
  background-color: orange;
}

.flex-container {
  height: 500px;
  width: 80%;
  border: 2px solid black;
  display: flex;

  /*
    L'utilisation du display de type flex va nous permettre d'agencer nos éléments selons deux axes: l'axe principal et l'axe secondaire. Ces deux axes sont perpendiculaires, et l'on les défini à partir de la direction de l'axe principal: 

    - row (par défaut) : gauche => droite
    - row-reverse : droite -> gauche
    - column : haut -> bas
    - column-reverse : bas -> haut
  */
  flex-direction: row;

  /*
    L'utilisation de flex permet le wrapping, la capacité de nos éléments à se déplacer dans l'axe secondaire (par défaut vers le bas) et au début d'une nouvelle instance de notre axe principal. De base le wrapping est desactivé (nowrap) mais on peut l'activer de la sorte:
  */
  /* flex-wrap: wrap; */

  /*
    Si l'on le veut, on peut définir à la fois le flex-direction et le flex-wrap via l'utilisation de 'flex-flow'
  */
  /* flex-flow: row wrap; */

  /*
    Pour placer nos éléments dans l'axe principal de notre display flex, on utilise la propriété CSS 'justify-content' qui par défaut est à 'start' (la gauche si notre flex est de type gauche->droite et que l'on est dans une langue se lisant de gauche à droite)

    - start, left : Gauche
    - center : Au milieu
    - end, right: Droite
    - space-between: On réparti l'espace restant entre les éléments
    - space-around: On va répartir l'espace disponible à la fois entre les éléments et avant et après les éléments de début et de fin
    -space-evenly: Pour avoir le même espace entre les éléments qu'avant ou après les éléments de bordure
  */

  justify-content: space-evenly;

  /*
    Pour pouvoir aligner ou placer nos éléments sur l'axe secondaire, il nous faut utiliser 'align-items' avec comme valeurs:

    - stretch (par défaut): Les éléments vont tenter de s'étendre sur toute la longueur de l'axe secondaire dispoonible
    - start: Les éléments se placent au début de l'axe secondaire
    - center: Les éléments se placent au centre de l'axe secondaire
    - end: Les éléments se placent à la fin de l'axe secondaire
  */

  align-items: center;
}

.flexbox {
  flex-basis: 150px;
}

.flexbox:nth-child(3n + 1) {

  /*
    Au niveau des enfants, il est possible de spécifier un alignement dans l'axe secondaire indépendamment de celui spécifié par le parent. Pour se faire, on utilise align-self avec comme valeurs possible: 

    - flex-start: au début
    - flex-end: A la fin
    - center: Au centre
    - stretch: S'etendre
  */

  /* align-self: flex-start; */

  /*
    Si l'on le veut, il est possible de changer l'ordre des éléments via la propriété CSS 'order'. Tous les éléments ont par défaut un ordre de valeur 0, et l'ordre sera de base suivant le flux (l'ordre dans l'HTML). Si l'on le veut, on peut donc passer au dela de cet ordre par défaut via la propriété CSS suivante:
  */


  order: 4;
  background-color: red;
}

.flexbox:nth-child(3n + 2) {
  /* align-self: flex-end; */


  /*
    Pour définir la taille qu'occupent les éléments enfants dans l'espace disponible, il existe trois propriétés flex qui sont:

    - 'flex-grow' qui va fixer un rapport de force dans le but d'occuper plus ou moins fortement l'espace disponible s'il y en a.
    - 'flex-basis' qui va servir à fixer la taille de base de l'élément. flex-basis, par défaut va valloir 'auto' qui est la valeur de la 'width' de notre élément

    - 'flex-shrink' fixer aussi un rapport de force dans la rapidité de l'élément à se compresser.
  */

  flex-grow: 3;
  flex-shrink: 5;

  /*
    Il est possible de regrouper dans l'ordre le flex-grow, le flex-shrink et le flex-basis derrière la propriété CSS 'flex'. De la sorte, on a une syntaxe un peu plus légère et on allège notre fichier de style. Attention cependant, ce genre de pratique nuit à la lisibilité de votre code.
  */

  /* flex: 3 5 150px; */
  background-color: green;
}

.flexbox:nth-child(3n) {
  flex-grow: 1;
  order: -1;
  flex-shrink: 10;
  background-color: blue;
}

.grid-container {
  height: 500px;
  width: 500px;
  border: 1px solid black;
  display: grid;
  gap: 5px;

  grid-template-columns:  200px repeat(2, 1fr); /* 200px 1fr 1fr */
  grid-template-rows: repeat(4, 1fr); /* 1fr 1fr 1fr */
}

.gridbox {
  display: flex;
  align-items: center;
  justify-content: center;
}

#grid-box2 {
  grid-column: 3;
  grid-row: 3;
}

#grid-box4 {
  background-color: red;
  grid-row: 2;
  /* grid-column: 1 / 4; */
  grid-column: 1 / span 3;
}

#grid-box1, #grid-box3 {
  grid-column: 1 / span 2;
}

#grid-box3 {
  grid-row: 3 / span 2;
  background-color: blue;
}